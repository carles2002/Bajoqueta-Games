// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var polySkin = PolySkin.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PolySkin
    {
        [JsonProperty("polySkin")]
        public List<PolySkinElement> PolyDatabase { get; set; }
    }

    public partial class PolySkinElement
    {
        [JsonProperty("skinID")]
        public long SkinId { get; set; }

        [JsonProperty("skinName")]
        public string SkinName { get; set; }

        [JsonProperty("skinDescription")]
        public string SkinDescription { get; set; }

        [JsonProperty("skinPrice")]
        public long SkinPrice { get; set; }

        [JsonProperty("skinBuy")]
        public long SkinBuy { get; set; }

        [JsonProperty("skinSelected")]
        public long SkinSelected { get; set; }
    }

    public partial class PolySkin
    {
        public static PolySkin FromJson(string json) => JsonConvert.DeserializeObject<PolySkin>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PolySkin self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
